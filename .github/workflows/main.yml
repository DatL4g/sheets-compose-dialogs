name: Build & Test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Gradle cache
        uses: gradle/gradle-build-action@v2
      - name: set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'buildSrc/src/main/kotlin/*') }}
      - name: Build, lint and spotless
        run: ./gradlew spotlessCheck assemble assembleAndroidTest lintDebug
      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  test:
    runs-on: macOS-latest
    needs: build
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        api-level: [ 29 ]
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'buildSrc/src/main/kotlin/*') }}

      - name: Build tests
        run: ./gradlew assembleDebugAndroidTest

      - name: Run functional tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          sdcard-path-or-size: 50M
          profile: Nexus 6P
          script: ./gradlew connectedCheck

      - name: Upload functional test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results-functional-${{ matrix.api-level }}
          path: "**/build/outputs/*/connected/*.xml"

      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  apk:
    name: Generate APK
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build APK
        run: ./gradlew assembleDebug --stacktrace

      - name: Rename & Move APK
        run: |
          mv app/build/outputs/apk/debug/app-debug.apk app/sample.apk

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: sample.apk
          path: app/sample.apk

      - name: Get version information
        id: version
        run: |
          VERSION_CODE=$(cat app/build.gradle | grep -oP 'versionCode\s+\K\d+')
          VERSION_NAME=$(cat app/build.gradle | grep -oP 'versionName\s+"\K[0-9a-zA-Z\.\-]*"')
          echo "::set-output name=version_code::$VERSION_CODE"
          echo "::set-output name=version_name::$VERSION_NAME"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "(General) Update sample APK"
          title: "(General) Update sample APK"
          branch: "apk-update"
          body: |
            This pull request updates the sample APK.

            ```
            Version code: ${{ steps.version.outputs.version_code }}
            Version name: ${{ steps.version.outputs.version_name }}
            ```
